---
import BlogCard from "@/components/BlogCard.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import dateFormat from "@/lib/utils/dateFormat";
import similarItems from "@/lib/utils/similarItems";
import { markdownify } from "@/lib/utils/textConverter";
import { render } from "astro:content";
import { PortableText } from "astro-portabletext";
import { urlFor } from "@/lib/sanity";
import GridBg from "./components/GridBg.astro";
import ImageMod from "./components/ImageMod.astro";
import Share from "./components/Share.astro";
import SectionRenderer from "./components/SectionRenderer.astro";

const { post, usingSanity = false } = Astro.props;

let title, description, author, image, date, content, sections, slug, similarPosts = [], Content;

if (usingSanity) {
  // Sanity data structure
  title = post.title;
  description = post.excerpt;
  author = post.author;
  image = post.image ? urlFor(post.image).width(1200).quality(85).url() : null;
  date = post.publishedAt || post._createdAt;
  content = post.body; // Legacy PortableText content
  sections = post.sections; // New sectioned content
  slug = post.slug?.current;
  
  // For Sanity posts, we'll just show recent posts instead of similar ones
  // You could implement similarity matching on categories later
  try {
    const { client, queries } = await import("@/lib/sanity");
    const recentPosts = await client.fetch(queries.posts);
    similarPosts = recentPosts.filter(p => p.slug?.current !== slug).slice(0, 3);
  } catch (error) {
    console.error("Error fetching recent posts:", error);
  }
} else {
  // Content collection data structure
  const posts = await getSinglePage("insights");
  similarPosts = similarItems(post, posts);
  const renderResult = await render(post);
  Content = renderResult.Content;
  const contentData = post.data;
  title = contentData.title;
  description = contentData.description;
  author = contentData.author;
  image = contentData.image;
  date = contentData.date;
  slug = post.id;
}
---

<section class="section relative overflow-hidden pt-20 pb-0">
  <GridBg />
  <div class="container">
    <h1
      set:html={markdownify(title)}
      class="text-center text-balance mb-20 text-[2rem] md:text-[2.5rem] lg:text-[4rem]"
      data-aos="fade-up-sm"
      data-aos-delay="100"
    />
    <div class="row justify-center">
      <article class="lg:col-10">
        <div
          class="relative rounded-3xl overflow-hidden mb-16"
          data-aos="zoom-in-sm"
          data-aos-delay="200"
        >
          {
            image && (
              <div class="mb-10">
                {usingSanity ? (
                  <img
                    src={image}
                    alt={title}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                ) : (
                  <ImageMod
                    src={image}
                    width={0}
                    height={0}
                    alt={title}
                    class="w-full h-full object-cover"
                    format="webp"
                  />
                )}
              </div>
            )
          }
          <div
            class="absolute bottom-0 w-full px-3 py-2 md:px-10 md:py-6 backdrop-blur-xl bg-text-dark/40 flex flex-col max-md:gap-y-4 md:flex-row items-center justify-between text-light"
          >
            <ul class="max-md:text-center">
              <li class="mr-6 inline-block">
                <p class="text-sm text-light/70">Written by</p>
                <p class="font-medium" set:html={usingSanity ? author?.name : author} />
              </li>
              <li class="inline-block">
                <p class="text-sm text-light/70">Published on</p>
                <p class="font-medium">{dateFormat(date)}</p>
              </li>
            </ul>
            <div class="flex items-center">
              <p class="mr-3">Share On</p>
              <Share
                className="social-icons"
                title={title}
                description={description}
                slug={slug}
              />
            </div>
          </div>
        </div>
        <div class="content" data-aos="fade-up-sm" data-aos-delay="400">
          {usingSanity ? (
            // Render Sanity content
            sections && sections.length > 0 ? (
              <SectionRenderer sections={sections} />
            ) : content ? (
              <div class="prose prose-lg max-w-none dark:prose-invert">
                <PortableText value={content} />
              </div>
            ) : (
              <div class="bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded mb-8">
                <p>No content available for this post.</p>
              </div>
            )
          ) : (
            // Render content collection content
            <Content />
          )}
        </div>
      </article>
    </div>

    <!-- Related posts -->
    <div class="section pb-0">
      <p class="text-sm text-center" data-aos="fade-up-sm">
        Recent Insights & Blogs
      </p>
      <h2 class="h1 mb-16 text-center" data-aos="fade-up-sm">
        Read similar articles
      </h2>
      <div class="row g-4 justify-center">
        {
          similarPosts.slice(0, 3).map((relatedPost, i) => (
            <div class="lg:col-4 md:col-6">
              <BlogCard data={relatedPost} index={i} usingSanity={usingSanity} />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
