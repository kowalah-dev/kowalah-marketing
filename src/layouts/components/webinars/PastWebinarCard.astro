---
import { markdownify } from "@/lib/utils/textConverter";

interface Props {
  webinar: {
    title: string;
    date: string;
    displayDate?: string;
    recording_link: string | null;
    youtube_id?: string; // Backward compatibility
    duration?: string;
    topics: string[];
    description?: string;
  };
}

const { webinar } = Astro.props;

// Support both recording_link and legacy youtube_id
const recordingUrl = webinar.recording_link ||
  (webinar.youtube_id ? `https://www.youtube.com/watch?v=${webinar.youtube_id}` : null);

// Extract YouTube thumbnail if it's a YouTube URL
let thumbnailUrl = "/images/webinars/webinar_placeholder.png"; // Default placeholder
if (recordingUrl) {
  const youtubeMatch = recordingUrl.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\s]+)/);
  if (youtubeMatch) {
    thumbnailUrl = `https://img.youtube.com/vi/${youtubeMatch[1]}/maxresdefault.jpg`;
  }
}

const formattedDate = webinar.displayDate || new Date(webinar.date).toLocaleDateString("en-GB", {
  day: "numeric",
  month: "long",
  year: "numeric",
});
---

<div
  class="past-webinar-card group overflow-hidden rounded-xl border border-gray-200/50 bg-gradient-to-br from-gray-50 to-white shadow-sm transition-all hover:shadow-md hover:border-primary/20"
  data-aos="fade-up-sm"
>
  <!-- Thumbnail with Play Overlay -->
  {recordingUrl ? (
    <a
      href={recordingUrl}
      target="_blank"
      rel="noopener noreferrer"
      class="relative block overflow-hidden"
    >
      <img
        src={thumbnailUrl}
        alt={webinar.title}
        class="aspect-video w-full object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
      />
      <!-- Play Button Overlay -->
      <div
        class="absolute inset-0 flex items-center justify-center bg-gradient-to-t from-dark/50 to-dark/20 transition-opacity group-hover:bg-gradient-to-t group-hover:from-dark/60 group-hover:to-dark/30"
      >
        <div
          class="flex h-16 w-16 items-center justify-center rounded-full bg-white/95 shadow-xl transition-transform group-hover:scale-110"
        >
          <svg
            class="ml-1 h-8 w-8 text-primary"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"
            ></path>
          </svg>
        </div>
      </div>
      <!-- Duration Badge -->
      {webinar.duration && (
        <div
          class="absolute bottom-3 right-3 rounded bg-dark/90 px-2.5 py-1 text-xs font-semibold text-white shadow-lg"
        >
          {webinar.duration}
        </div>
      )}
      <!-- Recorded Badge -->
      <div
        class="absolute top-3 left-3 rounded-full bg-gradient-to-r from-primary/90 to-secondary/90 px-3 py-1 text-xs font-semibold text-white shadow-lg"
      >
        Recorded
      </div>
    </a>
  ) : (
    <div class="relative block overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200 aspect-video flex items-center justify-center">
      <p class="text-gray-400 text-sm font-medium">Recording Coming Soon</p>
    </div>
  )}

  <!-- Card Content -->
  <div class="p-5">
    <!-- Date -->
    <div class="mb-2 flex items-center gap-2">
      <svg
        class="h-4 w-4 text-dark/40"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
        ></path>
      </svg>
      <p class="text-sm text-dark/60">
        {formattedDate}
      </p>
    </div>

    <!-- Title -->
    <h3
      set:html={markdownify(webinar.title)}
      class="mb-3 text-lg font-semibold text-dark transition-colors group-hover:text-primary line-clamp-2"
    />

    <!-- Description (if available, first 2 topics) -->
    {webinar.description && (
      <p class="mb-4 text-sm text-dark/70 line-clamp-2">
        {webinar.description}
      </p>
    )}

    <!-- Topics Tags (first 3) -->
    {
      webinar.topics && webinar.topics.length > 0 && (
        <div class="mb-4 flex flex-wrap gap-2">
          {webinar.topics.slice(0, 3).map((topic) => (
            <span class="rounded-full bg-primary/10 px-2.5 py-1 text-xs font-medium text-primary">
              {typeof topic === 'string' ? topic.slice(0, 30) : topic}
              {typeof topic === 'string' && topic.length > 30 ? '...' : ''}
            </span>
          ))}
          {webinar.topics.length > 3 && (
            <span class="rounded-full bg-gray-100 px-2.5 py-1 text-xs font-medium text-dark/60">
              +{webinar.topics.length - 3} more
            </span>
          )}
        </div>
      )
    }

    <!-- Watch Button -->
    {recordingUrl ? (
      <a
        href={recordingUrl}
        target="_blank"
        rel="noopener noreferrer"
        class="inline-flex items-center gap-2 text-sm font-semibold text-primary transition-colors hover:text-primary/80"
      >
        <svg
          class="h-4 w-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
          ></path>
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
         Watch Recording
      </a>
    ) : (
      <p class="text-sm text-dark/50 italic">
        Recording will be available soon
      </p>
    )}
  </div>
</div>
