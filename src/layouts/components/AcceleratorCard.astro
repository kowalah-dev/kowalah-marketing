---
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import { FaAngleRight } from "react-icons/fa6";

interface Props {
  image: string;
  title: string;
  type: string;
  difficulty: string;
  description: string;
  outcomes: string[];
  link?: string;
}

const { image, title, type, difficulty, description, outcomes, link } = Astro.props;

// Type colors mapping
const typeColors = {
  "Prompt": "bg-purple-500 text-white",
  "GPT": "bg-blue-500 text-white",
  "Integration": "bg-cyan-500 text-white",
  "Code": "bg-green-500 text-white",
  "Training Materials": "bg-orange-500 text-white",
  "Template": "bg-rose-500 text-white"
};

const difficultyColors = {
  "Beginner": "bg-green-100 text-green-800",
  "Intermediate": "bg-yellow-100 text-yellow-800",
  "Advanced": "bg-red-100 text-red-800"
};

const typeColor = typeColors[type as keyof typeof typeColors] || "bg-gray-500 text-white";
const difficultyColor = difficultyColors[difficulty as keyof typeof difficultyColors] || "bg-gray-100 text-gray-800";
---

<div class="group bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 border border-border/10 h-[600px] flex flex-col">
  <!-- Image Container - Fixed Height -->
  <div class="relative overflow-hidden h-[200px] flex-shrink-0">
    <ImageMod
      src={image}
      alt={title}
      width={400}
      height={250}
      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
    />
    <!-- Type Badge -->
    <div class="absolute top-3 left-3">
      <span class={`px-3 py-1 rounded-full text-xs font-medium ${typeColor}`}>
        {type}
      </span>
    </div>
    <!-- Difficulty Badge -->
    <div class="absolute top-3 right-3">
      <span class={`px-3 py-1 rounded-full text-xs font-medium ${difficultyColor}`}>
        {difficulty}
      </span>
    </div>
  </div>

  <!-- Content - Remaining Height -->
  <div class="p-5 flex flex-col h-[400px]">
    <!-- Title - Fixed Height -->
    <h4 class="h5 leading-normal mb-3 group-hover:text-primary transition-colors duration-300 h-[4.5rem] flex items-start overflow-hidden" set:html={markdownify(title)} />
    
    <!-- Description - Fixed Height -->
    <p class="text-text-light text-sm mb-4 h-[2.5rem] line-clamp-2 overflow-hidden" set:html={markdownify(description)} />
    
    <!-- Outcomes - Flexible Height -->
    <div class="mb-4 flex-grow flex flex-col">
      <h5 class="text-xs font-semibold text-gray-600 uppercase tracking-wide mb-2">What you'll get:</h5>
      <ul class="space-y-1 flex-grow">
        {outcomes && outcomes.length > 0 && outcomes.slice(0, 3).map((outcome) => (
          <li class="text-sm text-text-dark flex items-start">
            <span class="text-primary mr-2 mt-0.5 flex-shrink-0">â€¢</span>
            <span class="line-clamp-2">{outcome}</span>
          </li>
        ))}
      </ul>
    </div>
    
    <!-- CTA - Fixed Height at Bottom -->
    <div class="mt-auto flex-shrink-0">
      <a
        href="https://app.kowalah.com/sign-up"
        class="block w-full bg-primary hover:bg-primary/90 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-300 text-sm text-center"
      >
        Sign up for free
      </a>
      {link && (
        <a
          href={link}
          class="text-text-light hover:text-secondary transition-colors duration-300 text-xs inline-flex items-center justify-center w-full mt-2"
        >
          Learn more <FaAngleRight className="ml-1 text-xs" />
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-wrap: break-word;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    word-wrap: break-word;
  }
</style>