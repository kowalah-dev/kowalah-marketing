---
interface Inclusion {
  title: string;
  description: string;
  points: string[];
}

interface Props {
  title: string;
  subtitle?: string;
  items: Inclusion[];
}

const { title, subtitle, items }: Props = Astro.props;
---

<section class="section">
  <div class="container">
    <div class="row justify-center text-center">
      <div class="col-12 lg:col-9">
        <h2 class="h2 mb-4" data-aos="fade-up-sm">{title}</h2>
        {subtitle && (
          <p class="text-lg text-text-dark/75" data-aos="fade-up-sm" data-aos-delay="100">
            {subtitle}
          </p>
        )}
      </div>
    </div>

    <div class="row g-6 mt-12 justify-center">
      {items.map((item, index) => (
        <div
          class="col-12 md:col-6 mb-6 md:mb-8"
          data-aos="fade-up-sm"
          data-aos-delay={120 + index * 60}
        >
          <div class="h-full rounded-3xl bg-white/[0.04] shadow-lg shadow-primary/10">
            <div class="flex h-full flex-col rounded-3xl border border-white/10 p-8">
              <div class="mb-3">
                <div class="inline-flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-primary to-secondary text-white text-sm font-semibold shadow-lg shadow-primary/20">
                  {index + 1}
                </div>
              </div>
              <h3 class="text-xl font-semibold text-text-dark mb-2">{item.title}</h3>
              <p class="text-sm text-text-dark/75 mb-5">{item.description}</p>
              <ul class="space-y-3 text-sm text-text-dark/75">
                {item.points.map((point) => (
                  <li class="flex gap-3">
                  <span class="mt-1 inline-block h-2.5 w-2.5 flex-shrink-0 rounded-full bg-gradient-to-r from-primary to-secondary"></span>
                    <span>{point}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>
