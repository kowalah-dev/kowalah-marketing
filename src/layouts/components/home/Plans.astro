---
import { markdownify } from "@/lib/utils/textConverter";
import Button from "@/shortcodes/Button";
import { Icon } from "astro-icon/components";

const { plan } = Astro.props;
const { title, subtitle, plans_labels, plans } = plan;
---

<section class="max-md:bg-light max-md:rounded-3xl">
  <div class="container">
    <div class="md:bg-light md:rounded-3xl max-lg:py-6 lg:py-24">
      <div class="text-center rounded-2xl">
        <p
          set:html={markdownify(subtitle)}
          class="mb-4 text-sm"
          data-aos="fade-up"
          data-aos-delay="100"
        />
        <h2
          set:html={markdownify(title)}
          class="mb-8 lg:h1"
          data-aos="fade-up"
          data-aos-delay="150"
        />
      </div>

      <div class="row g-4 justify-center overflow-x-hidden">
        <div class="col-12">
          <div
            class="flex items-center justify-center gap-x-3"
            data-aos="fade-up-sm"
            data-aos-delay="200"
          >
            {
              plans_labels.map((plan: any, index: number) => (
                <span
                  class={`select-none text-primary ${index === 0 ? "order-0" : "order-3"}`}
                  set:html={markdownify(plan)}
                />
              ))
            }
            <label
              class="relative inline-block h-[1rem] w-[1.5rem] cursor-pointer order-1 rounded-full bg-primary"
            >
              <span class="sr-only">Pricing Switcher</span>
              <input
                type="checkbox"
                id="checkbox"
                class="pricing-check peer w-full cursor-pointer opacity-0"
              />
              <span
                class="absolute left-[-1px] top-[-1px] cursor-pointer before:absolute before:left-1 before:top-1 before:h-[0.64rem] before:w-[0.64rem] before:translate-x-0 before:rounded-full before:bg-body before:transition-all before:delay-75 before:duration-300 peer-checked:before:translate-x-2"
              ></span>
            </label>
          </div>
        </div>

        {
          plans?.map((item: any, index: number) => (
            <div class="col-12">
              <div
                class={`xl:w-[52%] lg:w-[64%] w-11/12 mx-auto rounded-2xl px-6 py-8 flex sm:flex-row flex-col justify-between gap-6 sm:gap-[88px] ${index % 2 === 0 ? "bg-tertiary" : "bg-body"}`}
                data-aos="zoom-in-sm"
                data-aos-delay={200 + index * 150}
              >
                {/* Left Section */}
                <div
                  class="flex flex-col sm:w-[48%]"
                  data-aos="fade-right-sm"
                  data-aos-delay="300"
                >
                  <h4
                    set:html={markdownify(item.title)}
                    class="mb-1 h5 text-primary"
                  />
                  <p
                    set:html={markdownify(item.description)}
                    class="mb-2 sm:mb-6 text-sm"
                  />
                  {/* Price Information */}
                  <div class="flex flex-row gap-4 mb-4 sm:mb-10 items-center">
                    {item.price_monthly && item.price_yearly && (
                      <>
                        <p class="text-[2.5rem] text-text-dark font-semibold">
                          {markdownify(item.price_prefix)}
                          <span
                            class="data-count"
                            data-count-yearly={item.price_yearly}
                            data-count-monthly={item.price_monthly}
                            set:html={markdownify(item.price_monthly)}
                          />
                        </p>
                        <div>
                          <p>/per use</p>
                          <p>/per month</p>
                        </div>
                      </>
                    )}
                    {item.price_description_monthly &&
                      item.price_description_yearly && (
                        <>
                          <span
                            class="text-monthly text-lg/[inherit]"
                            set:html={markdownify(
                              item.price_description_monthly
                            )}
                          />
                          <span
                            class="text-yearly hidden text-lg/[inherit]"
                            set:html={markdownify(
                              item.price_description_yearly
                            )}
                          />
                        </>
                      )}
                  </div>
                  <Button
                    label={item.button.label}
                    link={item.button.link}
                    style="primary"
                    icon="FaAngleRight"
                    className="w-fit"
                  />
                </div>

                {/* Right Section */}
                <div class="sm:w-[35%]">
                  <p
                    class="text-primary font-medium"
                    data-aos="fade-left-sm"
                    data-aos-delay="350"
                  >
                    Included Features
                  </p>
                  <hr
                    class="border border-border/20 mb-5 mt-4"
                    data-aos="fade-left-sm"
                    data-aos-delay="400"
                  />
                  <ul>
                    {item.features.map((feature: any, i: number) => (
                      <li
                        class="mb-2 flex items-center text-text-dark"
                        data-aos="fade-left-sm"
                        data-aos-delay={350 + i * 100}
                      >
                        <Icon
                          name="check"
                          class="rounded-full bg-primary text-lg p-1 mr-2"
                        />{" "}
                        <span set:html={markdownify(feature)} />
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<script>
  function pricingInit() {
    // Select the toggle switch element
    const toggleSwitch =
      document.querySelector<HTMLInputElement>(".pricing-check");
    const numbers = document.querySelectorAll<HTMLDivElement>(".data-count");
    toggleSwitch &&
      toggleSwitch.addEventListener("change", function () {
        if (toggleSwitch.checked) {
          numbers.forEach(function (number) {
            const yearlyCount = number.getAttribute("data-count-yearly");
            if (yearlyCount) {
              number.innerHTML = yearlyCount;
              animateCounter(number, parseInt(yearlyCount, 10));
            }
          });
          toggleVisibility(".text-yearly", "d-block", "hidden");
          toggleVisibility(".text-monthly", "hidden", "d-block");
        } else {
          numbers.forEach(function (number) {
            const monthlyCount = number.getAttribute("data-count-monthly");
            if (monthlyCount) {
              number.innerHTML = monthlyCount;
              animateCounter(number, parseInt(monthlyCount, 10));
            }
          });
          toggleVisibility(".text-monthly", "d-block", "hidden");
          toggleVisibility(".text-yearly", "hidden", "d-block");
        }
      });

    function animateCounter(element: HTMLElement, endValue: number) {
      let startValue = 0;
      const duration = 250;
      let startTime: number | null = null;

      function step(currentTime: number) {
        if (!startTime) startTime = currentTime;
        const progress = currentTime - startTime;
        const value =
          Math.min(progress / duration, 1) * (endValue - startValue) +
          startValue;
        element.innerHTML = Math.ceil(value).toString();
        if (progress < duration) {
          requestAnimationFrame(step);
        }
      }

      requestAnimationFrame(step);
    }

    function toggleVisibility(
      selector: string,
      addClass: string,
      removeClass: string
    ) {
      const elements = document.querySelectorAll<HTMLElement>(selector);
      elements.forEach(function (element) {
        element.classList.add(addClass);
        element.classList.remove(removeClass);
      });
    }
  }
  document.addEventListener("astro:page-load", pricingInit);
</script>
