---
export const prerender = false; // Enable SSR for real-time Sanity content

import Base from "@/layouts/Base.astro";
import PostSingle from "@/layouts/PostSingle.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import CallToAction from "@/partials/CallToAction.astro";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { client, queries } from "@/lib/sanity";

export async function getStaticPaths() {
  // Try to get Sanity posts first
  let sanityPosts = [];
  let usingSanity = false;
  
  try {
    sanityPosts = await client.fetch(queries.posts);
    usingSanity = true;
    console.log(`Found ${sanityPosts.length} posts from Sanity for static paths`);
  } catch (error) {
    console.error("Error fetching posts from Sanity for static paths:", error);
  }
  
  // Always get content collection posts as fallback
  const posts = await getSinglePage("insights");
  console.log(`Fallback: Found ${posts.length} posts from content collections for static paths`);
  
  const paths = [];
  
  // Add Sanity post paths
  if (usingSanity) {
    sanityPosts.forEach((post) => {
      if (post.slug?.current) {
        paths.push({
          params: { single: post.slug.current },
          props: { post, usingSanity: true }
        });
      }
    });
  }
  
  // Add content collection paths
  posts.forEach((post) => {
    paths.push({
      params: { single: post.id },
      props: { post, usingSanity: false }
    });
  });
  
  return paths;
}

const { single } = Astro.params;
let { post, usingSanity = false } = Astro.props;

// Fallback for SSR mode - try to fetch from Sanity or content collection
if (!post) {
  try {
    const sanityPost = await client.fetch(queries.post(single));
    if (sanityPost) {
      post = sanityPost;
      usingSanity = true;
    }
  } catch (error) {
    // Fallback to content collection
    const contentPost = await getEntry("insights", single as string);
    if (contentPost) {
      post = contentPost;
      usingSanity = false;
    }
  }
}

if (!post) {
  return Astro.redirect("/404");
}

let title, meta_title, description, image, fullPost;

if (usingSanity) {
  // Fetch complete post data from Sanity
  fullPost = await client.fetch(queries.post(single as string));
  title = fullPost?.title;
  meta_title = fullPost?.seo?.title || title;
  description = fullPost?.seo?.description || fullPost?.excerpt;
  image = fullPost?.image;
} else {
  // Use content collection data
  const contentData = post.data;
  title = contentData.title;
  meta_title = contentData.meta_title;
  description = contentData.description;
  image = contentData.image;
  fullPost = post;
}

const call_to_action = (await getEntry(
  "sections",
  "call-to-action"
)) as CollectionEntry<"sections">;
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PostSingle post={fullPost} usingSanity={usingSanity} />

  <CallToAction call_to_action={call_to_action} />
</Base>
