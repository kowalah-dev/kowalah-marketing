---
import BlogCard from "@/components/BlogCard.astro";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import CallToAction from "@/partials/CallToAction.astro";
import PageHeader from "@/partials/PageHeader.astro";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { client, queries } from "@/lib/sanity";

const postIndex = (await getEntry(
  "insights",
  "-index"
)) as CollectionEntry<"insights">;
const { title, meta_title, description, hero } = postIndex.data;

// Try to fetch from Sanity first, fallback to content collections
let posts;
let usingSanity = false;

try {
  posts = await client.fetch(queries.posts);
  usingSanity = true;
  console.log(`Found ${posts.length} posts from Sanity`);
} catch (error) {
  console.error("Error fetching posts from Sanity:", error);
  // Fallback to content collections
  const { getSinglePage } = await import("@/lib/contentParser.astro");
  const { sortByDate } = await import("@/lib/utils/sortFunctions");
  posts = await getSinglePage("insights");
  posts = sortByDate(posts);
}

const call_to_action = (await getEntry(
  "sections",
  "call-to-action"
)) as CollectionEntry<"sections">;
---

<Base title={title} meta_title={meta_title} description={description}>
  {hero && <PageHeader title={hero.title} content={hero.content} />}

  <section class="-mt-16">
    <div class="container">
      <div class="row gap-8 justify-center">
        {
          posts.map((post, i: number) => (
            <div class="sm:col-6 lg:col-4 xl:col-3">
              <BlogCard data={post} index={i} usingSanity={usingSanity} />
            </div>
          ))
        }
      </div>
    </div>
  </section>

  <CallToAction call_to_action={call_to_action} />
</Base>
