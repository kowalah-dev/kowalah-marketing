---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const contact = (await getEntry(
  "contact",
  "-index"
)) as CollectionEntry<"contact">;
const { contact_form_action }: { contact_form_action: string } = config.params;
const { title, description, meta_title, info } = contact.data;
const call_to_action = (await getEntry(
  "sections",
  "call-to-action"
)) as CollectionEntry<"sections">;
---

<Base title={title} meta_title={meta_title} description={description}>
  <PageHeader title={title} content={description} />
  <section class="-mt-16 relative overflow-hidden">
    <div class="container">
      <div class="row justify-center">
        <div class="col-12 sm:col-10 xl:col-6 lg:col-8 mb-20">
          <form action={contact_form_action} method="POST">
            <div class="mb-4 flex justify-between flex-col md:flex-row gap-4">
              <div
                class="md:w-1/2 w-full"
                data-aos="fade-up-sm"
                data-aos-delay="20"
              >
                <label for="full_name" class="form-label"> Full Name </label>
                <input
                  id="full_name"
                  name="full_name"
                  class="form-input"
                  placeholder="John"
                  type="text"
                  required
                />
              </div>
              <div
                class="md:w-1/2 w-full"
                data-aos="fade-up-sm"
                data-aos-delay="40"
              >
                <label for="last_name" class="form-label"> Last Name </label>
                <input
                  id="last_name"
                  name="last_name"
                  class="form-input"
                  placeholder="Smith"
                  type="text"
                  required
                />
              </div>
            </div>

            <div class="mb-4" data-aos="fade-up-sm" data-aos-delay="60">
              <label for="email" class="form-label"> Work Email </label>
              <input
                id="email"
                name="email"
                class="form-input"
                placeholder="john.smith@yourcompany.com"
                type="email"
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                required
              />
            </div>
            <div
              class="mb-4 custom-select"
              data-aos="fade-up-sm"
              data-aos-delay="80"
            >
              <label for="service" class="form-label"> How can we help? </label>
              <select id="service" name="service" class="form-input">
                <option disabled selected class="placeholder-option">
                  Select your inquiry type
                </option>
                <option value="ai_strategy">AI Strategy & Leadership</option>
                <option value="implementation">AI Implementation Support</option>
                <option value="chatgpt_rollout">ChatGPT Enterprise Rollout</option>
                <option value="team_training">Team Training & Upskilling</option>
                <option value="enterprise_demo">Enterprise Demo Request</option>
                <option value="partnership">Partnership Inquiry</option>
                <option value="technical_support">Technical Support</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="mb-4" data-aos="fade-up-sm" data-aos-delay="100">
              <label for="message" class="form-label"> Comments </label>
              <textarea
                id="message"
                name="message"
                class="form-input"
                placeholder="Tell us about your AI transformation goals and challenges..."
                rows="3"></textarea>
            </div>
            <button
              type="submit"
              class="btn btn-primary w-full"
              data-aos="fade-up-sm"
              data-aos-delay="120"
            >
              Send Message
            </button>
          </form>
        </div>

        <div class="col-10">
          {
            info.title && (
              <h2
                set:html={markdownify(info.title)}
                class="text-center mb-6"
                data-aos="fade-up-sm"
              />
            )
          }
          <p
            set:html={markdownify(info.content)}
            class="text-center text-balance mb-[3.75rem] max-md:[&>br]:hidden"
          />
          <div class="flex flex-col md:flex-row justify-center gap-10">
            {
              info.contacts.map((contact: any, index: number) => (
                <div
                  class="mb-4 text-center"
                  data-aos="fade-up-sm"
                  data-aos-delay={200 + index * 50}
                >
                  <Icon
                    name={contact.icon}
                    class="mx-auto mb-5 text-4xl p-[0.375rem] bg-light text-text border border-border/10 rounded-lg"
                  />
                  <h4
                    set:html={markdownify(contact.title)}
                    class="mb-3 h5 text-text-dark"
                  />
                  <p
                    set:html={markdownify(contact.details_1)}
                    class="text-text-dark hover:text-secondary"
                  />
                  <p
                    set:html={markdownify(contact.details_2)}
                    class="text-text-dark hover:text-secondary"
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </section>

  <CallToAction call_to_action={call_to_action} />
</Base>

<script>
  document.addEventListener("astro:page-load", () => {
    const select = document.getElementById("service") as HTMLSelectElement;

    function updateSelectStyle() {
      if (!select) return;
      const isDisabled = select?.selectedOptions[0].disabled;
      if (isDisabled) {
        select.classList.add("disabled-option");
      } else {
        select.classList.remove("disabled-option");
      }
    }

    if (select) updateSelectStyle();

    select?.addEventListener("change", updateSelectStyle);
  });
</script>
