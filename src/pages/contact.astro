---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import PageHeader from "@/partials/PageHeader.astro";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const contact = (await getEntry(
  "contact",
  "-index"
)) as CollectionEntry<"contact">;
const { contact_form_action }: { contact_form_action: string } = config.params;
const { title, description, meta_title, info } = contact.data;
---

<Base title={title} meta_title={meta_title} description={description}>
  <PageHeader
    title={title}
    content={description}
    backgroundImage="/images/contact/contact-hero.png"
  />
  <section class="pt-16 md:pt-24 relative overflow-hidden">
    <div class="container">
      <div class="row justify-center">
        <div class="col-12 sm:col-10 xl:col-6 lg:col-8 mb-20">
          <!-- Success Message -->
          <div id="form-success" class="hidden mb-8 p-6 bg-green-50 border border-green-200 rounded-lg text-center">
            <h3 class="text-xl font-semibold text-green-800 mb-2">Thank you for contacting us!</h3>
            <p class="text-green-700">We'll get back to you within 24 hours.</p>
          </div>

          <!-- Error Message -->
          <div id="form-error" class="hidden mb-8 p-6 bg-red-50 border border-red-200 rounded-lg text-center">
            <h3 class="text-xl font-semibold text-red-800 mb-2">Oops! Something went wrong.</h3>
            <p class="text-red-700">Please try again or email us directly at <a href="mailto:hello@kowalah.com" class="underline">hello@kowalah.com</a></p>
          </div>

          <form id="contact-form">
            <div class="mb-4 flex justify-between flex-col md:flex-row gap-4">
              <div
                class="md:w-1/2 w-full"
                data-aos="fade-up-sm"
                data-aos-delay="20"
              >
                <label for="firstname" class="form-label"> First Name </label>
                <input
                  id="firstname"
                  name="firstname"
                  class="form-input"
                  placeholder="John"
                  type="text"
                  required
                />
              </div>
              <div
                class="md:w-1/2 w-full"
                data-aos="fade-up-sm"
                data-aos-delay="40"
              >
                <label for="lastname" class="form-label"> Last Name </label>
                <input
                  id="lastname"
                  name="lastname"
                  class="form-input"
                  placeholder="Smith"
                  type="text"
                  required
                />
              </div>
            </div>

            <div class="mb-4" data-aos="fade-up-sm" data-aos-delay="60">
              <label for="email" class="form-label"> Work Email </label>
              <input
                id="email"
                name="email"
                class="form-input"
                placeholder="john.smith@yourcompany.com"
                type="email"
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
                required
              />
            </div>

            <div class="mb-4" data-aos="fade-up-sm" data-aos-delay="70">
              <label for="phone" class="form-label"> Phone Number (Optional) </label>
              <input
                id="phone"
                name="phone"
                class="form-input"
                placeholder="+1 555 123 4567"
                type="tel"
              />
            </div>

            <div
              class="mb-4 custom-select"
              data-aos="fade-up-sm"
              data-aos-delay="80"
            >
              <label for="how_can_we_help_" class="form-label"> How can we help? </label>
              <select id="how_can_we_help_" name="how_can_we_help_" class="form-input">
                <option disabled selected class="placeholder-option">
                  Select your inquiry type
                </option>
                <option value="ChatGPT Enterprise Deployment">ChatGPT Enterprise Deployment</option>
                <option value="ChatGPT Change Enablement">ChatGPT Change Enablement</option>
                <option value="ChatGPT Training">ChatGPT Training</option>
                <option value="Ongoing Managed Services">Ongoing Managed Services</option>
                <option value="Speaking Opportunities">Speaking Opportunities</option>
                <option value="AI Strategy and Advisory">AI Strategy and Advisory</option>
                <option value="Something else...">Something else...</option>
              </select>
            </div>
            <div class="mb-4" data-aos="fade-up-sm" data-aos-delay="100">
              <label for="message" class="form-label"> Comments </label>
              <textarea
                id="message"
                name="message"
                class="form-input"
                placeholder="Tell us about your AI transformation goals and challenges..."
                rows="3"></textarea>
            </div>
            <button
              type="submit"
              id="submit-button"
              class="btn btn-primary w-full"
              data-aos="fade-up-sm"
              data-aos-delay="120"
            >
              Send Message
            </button>
          </form>
        </div>

        <div class="col-10">
          {
            info.title && (
              <h2
                set:html={markdownify(info.title)}
                class="text-center mb-6"
                data-aos="fade-up-sm"
              />
            )
          }
          <p
            set:html={markdownify(info.content)}
            class="text-center text-balance mb-[3.75rem] max-md:[&>br]:hidden"
          />
          <div class="flex flex-col md:flex-row justify-center gap-10">
            {
              info.contacts.map((contact: any, index: number) => (
                <div
                  class="mb-4 text-center"
                  data-aos="fade-up-sm"
                  data-aos-delay={200 + index * 50}
                >
                  <Icon
                    name={contact.icon}
                    class="mx-auto mb-5 text-4xl p-[0.375rem] bg-light text-text border border-border/10 rounded-lg"
                  />
                  <h4
                    set:html={markdownify(contact.title)}
                    class="mb-3 h5 text-text-dark"
                  />
                  <p
                    set:html={markdownify(contact.details_1)}
                    class="text-text-dark hover:text-secondary"
                  />
                  <p
                    set:html={markdownify(contact.details_2)}
                    class="text-text-dark hover:text-secondary"
                  />
                </div>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </section>
</Base>

<script>
  document.addEventListener("astro:page-load", () => {
    const select = document.getElementById("how_can_we_help_") as HTMLSelectElement;
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const submitButton = document.getElementById("submit-button") as HTMLButtonElement;
    const successMessage = document.getElementById("form-success") as HTMLElement;
    const errorMessage = document.getElementById("form-error") as HTMLElement;

    // HubSpot configuration
    const PORTAL_ID = "139642758";
    const FORM_GUID = "c10f1502-7643-4064-97cc-09cd96943c88";
    const HUBSPOT_API_URL = `https://api.hsforms.com/submissions/v3/integration/submit/${PORTAL_ID}/${FORM_GUID}`;

    // Update select dropdown styling
    function updateSelectStyle() {
      if (!select) return;
      const isDisabled = select?.selectedOptions[0].disabled;
      if (isDisabled) {
        select.classList.add("disabled-option");
      } else {
        select.classList.remove("disabled-option");
      }
    }

    if (select) updateSelectStyle();
    select?.addEventListener("change", updateSelectStyle);

    // Handle form submission
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Disable button and show loading state
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = "Sending...";
      }

      // Hide any previous messages
      successMessage?.classList.add("hidden");
      errorMessage?.classList.add("hidden");

      // Get form data
      const formData = new FormData(form);

      // Build HubSpot fields array
      const fields = [];
      for (const [key, value] of formData.entries()) {
        if (value) {  // Only include non-empty fields
          fields.push({
            objectTypeId: "0-1",  // Contact object
            name: key,
            value: value.toString()
          });
        }
      }

      // Prepare HubSpot submission payload
      const payload = {
        fields: fields,
        context: {
          pageUri: window.location.href,
          pageName: document.title
        }
      };

      try {
        const response = await fetch(HUBSPOT_API_URL, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        });

        if (response.ok) {
          // Success!
          successMessage?.classList.remove("hidden");
          form.reset();
          // Scroll to success message
          successMessage?.scrollIntoView({ behavior: "smooth", block: "center" });
        } else {
          // Error
          console.error("HubSpot submission failed:", await response.text());
          errorMessage?.classList.remove("hidden");
          errorMessage?.scrollIntoView({ behavior: "smooth", block: "center" });
        }
      } catch (error) {
        // Network error
        console.error("Form submission error:", error);
        errorMessage?.classList.remove("hidden");
        errorMessage?.scrollIntoView({ behavior: "smooth", block: "center" });
      } finally {
        // Re-enable button
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = "Send Message";
        }
      }
    });
  });
</script>
